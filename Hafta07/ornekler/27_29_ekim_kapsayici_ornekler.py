# -*- coding: utf-8 -*-
"""27_29_ekim_kapsayici_ornekler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10fTexpevx8rpcMS2E81RSQFXkN0Ksrmf

# oturum 1 27 Ekim örnekleri
diğerleri oturum 2 için aşağıda
"""

import numpy as np

"""
Soru: Bir markette 5 farklı ürünün fiyatları ve alınan miktarları veriliyor.
Toplam ödenecek tutarı NumPy kullanarak hesaplayın.
"""
# Ürün fiyatları (TL)
urun_fiyatlari = np.array([15.50, 8.75, 25.00, 12.25, 6.50])

# Alınan miktarlar (adet)
alinan_miktarlar = np.array([2, 3, 1, 4, 2])

# Vektörel çarpım ile toplam tutar hesaplama
toplam_tutar = np.sum(urun_fiyatlari * alinan_miktarlar)
print(f"Toplam ödenecek tutar: {toplam_tutar:.2f} TL")

import numpy as np

"""
Soru: Bir haftalık günlük ortalama sıcaklık verileri veriliyor.
Haftanın ortalama sıcaklığını ve en sıcak günü bulun.
"""
# Günlük ortalama sıcaklıklar (°C)
sicakliklar = np.array([22.5, 24.1, 19.8, 21.3, 25.6, 23.2, 20.7])

# Ortalama sıcaklık
ortalama_sicaklik = np.mean(sicakliklar)
print(f"Haftalık ortalama sıcaklık: {ortalama_sicaklik:.1f}°C")

# En sıcak gün
en_sicak_gun = np.max(sicakliklar)
en_sicak_gun_indeksi = np.argmax(sicakliklar)
gunler = ["Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi", "Pazar"]
print(f"En sıcak gün: {gunler[en_sicak_gun_indeksi]} ({en_sicak_gun}°C)")

import numpy as np

"""
Soru: 5 öğrencinin 3 sınav notu veriliyor.
Her öğrencinin not ortalamasını ve sınıfın genel ortalamasını hesaplayın.
"""
# Öğrenci notları (5 öğrenci, 3 sınav)
notlar = np.array([
    [85, 90, 78],  # 1. öğrenci
    [92, 88, 95],  # 2. öğrenci
    [76, 82, 79],  # 3. öğrenci
    [88, 85, 92],  # 4. öğrenci
    [95, 96, 98]   # 5. öğrenci
])

# Öğrenci başına ortalama (axis=1: satırlar boyunca)
ogrenci_ortalamalari = np.mean(notlar, axis=1)
print("Öğrenci ortalamaları:", ogrenci_ortalamalari)

# Sınıf genel ortalaması
sinif_ortalamasi = np.mean(notlar)
print(f"Sınıf genel ortalaması: {sinif_ortalamasi:.2f}")

import numpy as np

"""
Soru: Bir fitness uygulamasında kullanıcının haftalık adım sayıları veriliyor.
Günlük ortalama adım sayısını ve hedefe ulaşılan günleri bulun.
"""
# Günlük adım sayıları
gunluk_adimlar = np.array([8456, 12034, 9876, 15678, 11234, 13456, 10987])

# Günlük hedef adım sayısı
hedef_adim = 10000

# Ortalama adım sayısı
ortalama_adim = np.mean(gunluk_adimlar)
print(f"Günlük ortalama adım: {ortalama_adim:.0f}")

# Hedefe ulaşılan günler
hedefe_ulasilan_gunler = gunluk_adimlar[gunluk_adimlar >= hedef_adim]
print(f"Hedefe ulaşılan gün sayısı: {len(hedefe_ulasilan_gunler)}")
print(f"Hedefe ulaşılan günlerdeki adımlar: {hedefe_ulasilan_gunler}")

import numpy as np

"""
Soru: Farklı miktarlardaki dolar değerlerini TL'ye çevirin.
"""
# Dolar miktarları
dolar_miktarlari = np.array([100, 250, 500, 1000, 50])

# Dolar kuru (TL)
dolar_kuru = 32.45

# TL karşılıkları (broadcasting kullanarak)
tl_karsiliklari = dolar_miktarlari * dolar_kuru
print("Dolar miktarları:", dolar_miktarlari)
print("TL karşılıkları:", np.round(tl_karsiliklari, 2))

import numpy as np

"""
Soru: Bir aracın haftalık yakıt tüketim verileri veriliyor.
Toplam yakıt tüketimini ve günlük ortalama tüketimi hesaplayın.
"""
# Günlük yakıt tüketimi (litre)
gunluk_tuketim = np.array([8.5, 7.2, 9.1, 6.8, 10.2, 12.5, 5.9])

# Toplam yakıt tüketimi
toplam_tuketim = np.sum(gunluk_tuketim)
print(f"Toplam yakıt tüketimi: {toplam_tuketim:.1f} litre")

# Ortalama günlük tüketim
ortalama_tuketim = np.mean(gunluk_tuketim)
print(f"Ortalama günlük tüketim: {ortalama_tuketim:.1f} litre")

# En verimli gün (en az tüketim)
en_verimli_gun = np.min(gunluk_tuketim)
print(f"En verimli gün tüketimi: {en_verimli_gun:.1f} litre")

import numpy as np

"""
Soru: Bir sosyal medya hesabının günlük yeni takipçi sayıları veriliyor.
Toplam takipçi artışını ve ortalama günlük artışı hesaplayın.
"""
# Günlük yeni takipçi sayıları
gunluk_takipci_artisi = np.array([45, 67, 23, 89, 34, 56, 78])

# Toplam takipçi artışı
toplam_artis = np.sum(gunluk_takipci_artisi)
print(f"Toplam takipçi artışı: {toplam_artis}")

# Ortalama günlük artış
ortalama_artis = np.mean(gunluk_takipci_artisi)
print(f"Ortalama günlük takipçi artışı: {ortalama_artis:.1f}")

# En başarılı gün (en fazla takipçi)
en_basarili_gun = np.max(gunluk_takipci_artisi)
print(f"En başarılı gün takipçi artışı: {en_basarili_gun}")

import numpy as np

"""
Soru: Bir evin aylık elektrik tüketim verileri veriliyor.
Aylık ortalama tüketimi ve toplam yıllık tüketimi hesaplayın.
"""
# Aylık elektrik tüketimi (kWh)
aylik_tuketim = np.array([350, 420, 380, 290, 310, 480, 520, 450, 390, 340, 410, 430])

# Ortalama aylık tüketim
ortalama_aylik = np.mean(aylik_tuketim)
print(f"Ortalama aylık tüketim: {ortalama_aylik:.0f} kWh")

# Toplam yıllık tüketim
toplam_yillik = np.sum(aylik_tuketim)
print(f"Toplam yıllık tüketim: {toplam_yillik} kWh")

# En yüksek tüketim ayları (400 kWh üzeri)
yuksek_tuketim_aylari = aylik_tuketim[aylik_tuketim > 400]
print(f"400 kWh üzeri tüketim ayları: {yuksek_tuketim_aylari}")

import numpy as np

"""
Soru: Bir e-ticaret sitesindeki ürünlerin orijinal fiyatları ve indirim oranları veriliyor.
İndirimli fiyatları hesaplayın.
"""
# Ürün fiyatları
urun_fiyatlari = np.array([199.99, 149.50, 299.00, 89.99, 459.00])

# İndirim oranları (%)
indirim_oranlari = np.array([15, 20, 10, 25, 30])

# İndirimli fiyatlar
indirimli_fiyatlar = urun_fiyatlari * (1 - indirim_oranlari / 100)
print("Orijinal fiyatlar:", urun_fiyatlari)
print("İndirimli fiyatlar:", np.round(indirimli_fiyatlar, 2))

# Toplam tasarruf
toplam_tasarruf = np.sum(urun_fiyatlari) - np.sum(indirimli_fiyatlar)
print(f"Toplam tasarruf: {toplam_tasarruf:.2f} TL")

import numpy as np

"""
Soru: Bir restoranda müşterilerin yemek puanlamaları veriliyor.
Ortalama puanı ve en yüksek/endüşük puanları bulun.
"""
# Müşteri puanları (1-10 arası)
musteri_puanlari = np.array([8, 9, 7, 10, 6, 9, 8, 7, 10, 8, 9, 7])

# Ortalama puan
ortalama_puan = np.mean(musteri_puanlari)
print(f"Ortalama müşteri puanı: {ortalama_puan:.1f}")

# En yüksek ve en düşük puanlar
en_yuksek_puan = np.max(musteri_puanlari)
en_dusuk_puan = np.min(musteri_puanlari)
print(f"En yüksek puan: {en_yuksek_puan}")
print(f"En düşük puan: {en_dusuk_puan}")

# 8 ve üzeri puan alan müşteri sayısı
yuksek_puan_sayisi = np.sum(musteri_puanlari >= 8)
print(f"8 ve üzeri puan veren müşteri sayısı: {yuksek_puan_sayisi}")

import numpy as np

"""
Soru: Bir mağazanın ürün stok durumları veriliyor.
Kritik stok seviyesinin altındaki ürünleri belirleyin.
"""
# Ürün stok miktarları
stok_miktarlari = np.array([45, 12, 78, 5, 23, 56, 8, 34, 67, 2])

# Ürün isimleri
urun_isimleri = np.array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'])

# Kritik stok seviyesi
kritik_stok = 10

# Kritik seviyenin altındaki ürünler
kritik_urunler = urun_isimleri[stok_miktarlari < kritik_stok]
kritik_miktarlar = stok_miktarlari[stok_miktarlari < kritik_stok]

print("Kritik stok seviyesinin altındaki ürünler:")
for urun, miktar in zip(kritik_urunler, kritik_miktarlar):
    print(f"{urun}: {miktar} adet")

import numpy as np

"""
Soru: Bir basketbol takımının oyuncularının maç başına sayı ortalamaları veriliyor.
Takımın genel performansını analiz edin.
"""
# Oyuncu sayı ortalamaları
oyuncu_ortalamalari = np.array([15.6, 22.3, 18.7, 12.9, 25.1, 14.8, 19.5])

# Takım ortalaması
takim_ortalamasi = np.mean(oyuncu_ortalamalari)
print(f"Takım sayı ortalaması: {takim_ortalamasi:.1f}")

# En skorer oyuncu
en_skorer = np.max(oyuncu_ortalamalari)
en_skorer_indeks = np.argmax(oyuncu_ortalamalari)
print(f"En skorer oyuncu: {en_skorer_indeks + 1}. oyuncu ({en_skorer} sayı/maç)")

# 20 sayı/maç üzeri performans gösteren oyuncular
ustun_performans = oyuncu_ortalamalari[oyuncu_ortalamalari > 20]
print(f"20 sayı/maç üzeri performans: {len(ustun_performans)} oyuncu")

import numpy as np

"""
Soru: Bir web sitesinin saatlik ziyaretçi sayıları veriliyor.
Günün en yoğun saatlerini ve toplam ziyaretçi sayısını bulun.
"""
# Saatlik ziyaretçi sayıları (24 saat)
saatlik_ziyaretci = np.array([45, 32, 28, 25, 23, 35, 67, 124, 187, 234, 256, 278,
                             265, 243, 198, 167, 145, 178, 195, 167, 134, 98, 67, 45])

# Toplam günlük ziyaretçi
toplam_ziyaretci = np.sum(saatlik_ziyaretci)
print(f"Toplam günlük ziyaretçi: {toplam_ziyaretci}")

# En yoğun saat
en_yogun_saat = np.argmax(saatlik_ziyaretci)
en_yogun_ziyaretci = np.max(saatlik_ziyaretci)
print(f"En yoğun saat: {en_yogun_saat}:00 ({en_yogun_ziyaretci} ziyaretçi)")

# Ortalama saatlik ziyaretçi
ortalama_ziyaretci = np.mean(saatlik_ziyaretci)
print(f"Ortalama saatlik ziyaretçi: {ortalama_ziyaretci:.1f}")

import numpy as np

"""
Soru: Farklı akaryakıt istasyonlarındaki benzin fiyatları veriliyor.
En ucuz ve en pahalı istasyonları bulun.
"""
# Akaryakıt istasyonu fiyatları (TL/lt)
benzin_fiyatlari = np.array([42.85, 43.20, 42.45, 43.50, 42.90, 43.75, 42.60])

# İstasyon isimleri
istasyon_isimleri = np.array(['BP', 'Shell', 'OPET', 'Petrol Ofisi', 'Total', 'Aygaz', 'Alpet'])

# En ucuz ve en pahalı fiyatlar
en_ucuz_fiyat = np.min(benzin_fiyatlari)
en_ucuz_indeks = np.argmin(benzin_fiyatlari)

en_pahali_fiyat = np.max(benzin_fiyatlari)
en_pahali_indeks = np.argmax(benzin_fiyatlari)

print(f"En ucuz istasyon: {istasyon_isimleri[en_ucuz_indeks]} - {en_ucuz_fiyat} TL")
print(f"En pahalı istasyon: {istasyon_isimleri[en_pahali_indeks]} - {en_pahali_fiyat} TL")

# Ortalama benzin fiyatı
ortalama_fiyat = np.mean(benzin_fiyatlari)
print(f"Ortalama benzin fiyatı: {ortalama_fiyat:.2f} TL")

import numpy as np

"""
Soru: Bir kripto paranın günlük fiyat değişimleri veriliyor.
En karlı ve en zararlı günleri belirleyin.
"""
# Günlük fiyat değişimleri (%)
gunluk_degisim = np.array([2.5, -1.8, 5.2, -3.1, 1.7, -2.4, 4.8, -0.9, 3.2, -1.5])

# En karlı gün (en yüksek artış)
en_karli_gun = np.max(gunluk_degisim)
en_karli_indeks = np.argmax(gunluk_degisim)

# En zararlı gün (en yüksek düşüş)
en_zararli_gun = np.min(gunluk_degisim)
en_zararli_indeks = np.argmin(gunluk_degisim)

print(f"En karlı gün: {en_karli_indeks + 1}. gün (%{en_karli_gun:.1f} artış)")
print(f"En zararlı gün: {en_zararli_indeks + 1}. gün (%{en_zararli_gun:.1f} düşüş)")

# Pozitif getiri gün sayısı
pozitif_gun_sayisi = np.sum(gunluk_degisim > 0)
print(f"Pozitif getiri gün sayısı: {pozitif_gun_sayisi}")

"""# oturum 2 29 Ekim Örnekleri"""

import numpy as np

"""
Örnek 1: Öğrenci Not Filtreleme
Soru: Bir sınıftaki öğrencilerin notları veriliyor.
Sadece geçer not alan (50 ve üzeri) öğrencileri listeleyin.
"""
# Öğrenci notları
notlar = np.array([45, 78, 32, 89, 56, 92, 41, 67, 53, 84, 29, 71])

# Boolean indeksleme ile geçer notlar
gecer_notlar = notlar[notlar >= 50]
gecer_sayisi = len(gecer_notlar)

print(f"Geçer not alan öğrenci sayısı: {gecer_sayisi}")
print(f"Geçer notlar: {gecer_notlar}")

# Ortalama geçer not
ortalama_gecer_not = np.mean(gecer_notlar)
print(f"Geçer not ortalaması: {ortalama_gecer_not:.1f}")

import numpy as np

"""
Örnek 2: Hava Kalitesi İndeksi Analizi
Soru: Bir şehirdeki günlük hava kalitesi indeksleri veriliyor.
Sağlıklı seviyedeki (0-50 arası) günleri belirleyin.
"""
# Günlük hava kalitesi indeksleri
hava_kalitesi = np.array([45, 67, 23, 89, 34, 56, 78, 12, 41, 65, 29, 51, 38, 72, 19])

# Sağlıklı hava kalitesi günleri (0-50 arası)
saglikli_gunler = hava_kalitesi[hava_kalitesi <= 50]
saglikli_gun_sayisi = len(saglikli_gunler)

print(f"Sağlıklı hava kalitesi gün sayısı: {saglikli_gun_sayisi}")
print(f"Sağlıklı günlerin indeks değerleri: {saglikli_gunler}")

# Ortalama sağlıklı indeks değeri
ortalama_saglikli_indeks = np.mean(saglikli_gunler)
print(f"Sağlıklı günler ortalama indeks: {ortalama_saglikli_indeks:.1f}")

import numpy as np

"""
Soru: Bir e-ticaret sitesindeki ürünlerin fiyatları ve stok durumları veriliyor.
Stokta olan ve 100 TL altındaki ürünleri listeleyin.
"""
# Ürün fiyatları
urun_fiyatlari = np.array([85.99, 149.50, 75.25, 199.99, 45.75, 299.00, 89.90, 125.00])

# Stok durumları (1: stokta, 0: stokta yok)
stok_durumu = np.array([1, 0, 1, 1, 0, 1, 1, 0])

# Ürün isimleri
urun_isimleri = np.array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])

# Stokta olan ve 100 TL altındaki ürünler
filtre = (stok_durumu == 1) & (urun_fiyatlari < 100)
uygun_urunler = urun_isimleri[filtre]
uygun_fiyatlar = urun_fiyatlari[filtre]

print("Stokta olan ve 100 TL altındaki ürünler:")
for urun, fiyat in zip(uygun_urunler, uygun_fiyatlar):
    print(f"{urun}: {fiyat:.2f} TL")

import numpy as np

"""
Soru: Bir fitness programındaki katılımcıların başlangıç ve bitiş kiloları veriliyor.
5 kg'dan fazla kilo veren katılımcıları belirleyin.
"""
# Başlangıç kiloları (kg)
baslangic_kilo = np.array([85, 92, 78, 105, 68, 88, 95, 72])

# Bitiş kiloları (kg)
bitis_kilo = np.array([82, 86, 75, 97, 65, 80, 88, 70])

# Kilo değişimleri
kilo_degisim = baslangic_kilo - bitis_kilo

# 5 kg'dan fazla kilo verenler
basarili_katilimcilar = kilo_degisim > 5
basarili_sayisi = np.sum(basarili_katilimcilar)

print(f"5 kg'dan fazla kilo veren katılımcı sayısı: {basarili_sayisi}")
print(f"Kilo değişimleri: {kilo_degisim}")

# Ortalama kilo kaybı
ortalama_kayip = np.mean(kilo_degisim)
print(f"Ortalama kilo kaybı: {ortalama_kayip:.1f} kg")

import numpy as np

"""
Soru: Bir hisse senedinin günlük kapanış fiyatları veriliyor.
50 günlük hareketli ortalamanın üzerinde kapanan günleri bulun.
"""
# Hisse senedi kapanış fiyatları (30 gün)
kapanis_fiyatlari = np.array([45.6, 46.2, 44.8, 47.1, 45.9, 48.3, 46.7, 49.2, 47.8,
                             48.9, 50.1, 49.5, 51.2, 50.8, 52.1, 51.6, 53.4, 52.7,
                             54.2, 53.8, 55.1, 54.5, 56.3, 55.7, 57.2, 56.8, 58.1,
                             57.5, 59.3, 58.6])

# 5 günlük hareketli ortalama
hareketli_ortalama = np.convolve(kapanis_fiyatlari, np.ones(5)/5, mode='valid')

# Hareketli ortalamanın üzerinde kapanan günler
ustunde_kapanan_gunler = kapanis_fiyatlari[4:] > hareketli_ortalama
ustunde_gun_sayisi = np.sum(ustunde_kapanan_gunler)

print(f"Hareketli ortalamanın üzerinde kapanan gün sayısı: {ustunde_gun_sayisi}")
print(f"Toplam analiz edilen gün sayısı: {len(hareketli_ortalama)}")

import numpy as np

"""
Soru: Bir online testte alınan puanlar veriliyor.
Puanları A(90-100), B(80-89), C(70-79), D(60-69), F(0-59) şeklinde kategorilere ayırın.
"""
# Test puanları
test_puanlari = np.array([85, 92, 78, 45, 67, 89, 95, 72, 58, 83, 76, 91, 64, 79, 87])

# Not kategorileri
A_notu = test_puanlari[(test_puanlari >= 90)]
B_notu = test_puanlari[(test_puanlari >= 80) & (test_puanlari < 90)]
C_notu = test_puanlari[(test_puanlari >= 70) & (test_puanlari < 80)]
D_notu = test_puanlari[(test_puanlari >= 60) & (test_puanlari < 70)]
F_notu = test_puanlari[test_puanlari < 60]

print(f"A notu alanlar: {len(A_notu)} kişi - Puanlar: {A_notu}")
print(f"B notu alanlar: {len(B_notu)} kişi - Puanlar: {B_notu}")
print(f"C notu alanlar: {len(C_notu)} kişi - Puanlar: {C_notu}")
print(f"D notu alanlar: {len(D_notu)} kişi - Puanlar: {D_notu}")
print(f"F notu alanlar: {len(F_notu)} kişi - Puanlar: {F_notu}")

import numpy as np

"""
Soru: Bir restorandaki masaların kapasiteleri ve rezervasyon durumları veriliyor.
4 kişilik ve üzeri boş masaları listeleyin.
"""
# Masa kapasiteleri
masa_kapasiteleri = np.array([2, 4, 6, 2, 8, 4, 6, 2, 4, 10])

# Rezervasyon durumları (1: dolu, 0: boş)
rezervasyon_durumu = np.array([1, 0, 1, 0, 0, 1, 0, 1, 0, 1])

# 4 kişilik ve üzeri boş masalar
uygun_masalar = (masa_kapasiteleri >= 4) & (rezervasyon_durumu == 0)
uygun_masa_kapasiteleri = masa_kapasiteleri[uygun_masalar]

print(f"Uygun masa sayısı (4 kişi ve üzeri): {len(uygun_masa_kapasiteleri)}")
print(f"Uygun masa kapasiteleri: {uygun_masa_kapasiteleri}")

# Toplam uygun kapasite
toplam_uygun_kapasite = np.sum(uygun_masa_kapasiteleri)
print(f"Toplam uygun kapasite: {toplam_uygun_kapasite} kişi")

import numpy as np

"""
Soru: Bir akıllı ev sisteminde oda sıcaklıkları veriliyor.
Konfor sıcaklığı (20-24°C) dışındaki odaları belirleyin.
"""
# Oda sıcaklıkları (°C)
oda_sicakliklari = np.array([22.5, 19.8, 25.2, 21.7, 18.9, 23.8, 26.1, 20.3])

# Oda isimleri
oda_isimleri = np.array(['Salon', 'Mutfak', 'Yatak Odası', 'Çocuk Odası',
                        'Banyo', 'Çalışma Odası', 'Misafir Odası', 'Koridor'])

# Konfor sıcaklığı dışındaki odalar
konfor_disindaki_odalar = (oda_sicakliklari < 20) | (oda_sicakliklari > 24)
problemli_odalar = oda_isimleri[konfor_disindaki_odalar]
problemli_sicakliklar = oda_sicakliklari[konfor_disindaki_odalar]

print("Konfor sıcaklığı dışındaki odalar:")
for oda, sicaklik in zip(problemli_odalar, problemli_sicakliklar):
    durum = "soğuk" if sicaklik < 20 else "sıcak"
    print(f"{oda}: {sicaklik}°C ({durum})")

import numpy as np

"""
Soru: Bir araç kiralama şirketindeki araçların günlük kiralama ücretleri ve yakıt türleri veriliyor.
Benzinli ve 200 TL altındaki araçları listeleyin.
"""
# Araç kiralama ücretleri (TL/gün)
kira_ucretleri = np.array([150, 280, 120, 350, 180, 220, 190, 250])

# Yakıt türleri (0: benzin, 1: dizel, 2: elektrik)
yakit_turleri = np.array([0, 1, 0, 1, 0, 2, 0, 1])

# Araç modelleri
arac_modelleri = np.array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])

# Benzinli ve 200 TL altı araçlar
filtre = (yakit_turleri == 0) & (kira_ucretleri < 200)
uygun_araclar = arac_modelleri[filtre]
uygun_ucretler = kira_ucretleri[filtre]

print("Benzinli ve 200 TL altı araçlar:")
for arac, ucret in zip(uygun_araclar, uyun_ucretler):
    print(f"{arac}: {ucret} TL/gün")

import numpy as np

"""
Soru: Bir online kursa kayıtlı öğrencilerin tamamlama yüzdeleri veriliyor.
Kursu %75 ve üzeri tamamlayan öğrencileri belirleyin.
"""
# Öğrenci tamamlama yüzdeleri (%)
tamamlama_yuzdeleri = np.array([45, 89, 67, 92, 78, 56, 95, 82, 71, 88, 63, 97])

# Öğrenci ID'leri
ogrenci_id = np.array([101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112])

# Kursu %75 ve üzeri tamamlayan öğrenciler
basari_ogrenciler = ogrenci_id[tamamlama_yuzdeleri >= 75]
basari_yuzdeleri = tamamlama_yuzdeleri[tamamlama_yuzdeleri >= 75]

print(f"Kursu başarıyla tamamlayan öğrenci sayısı: {len(basari_ogrenciler)}")
print("Başarılı öğrenciler ve tamamlama yüzdeleri:")
for id, yuzde in zip(basari_ogrenciler, basari_yuzdeleri):
    print(f"Öğrenci {id}: %{yuzde}")

# Ortalama tamamlama yüzdesi
ortalama_tamamlama = np.mean(tamamlama_yuzdeleri)
print(f"Tüm öğrencilerin ortalama tamamlama yüzdesi: %{ortalama_tamamlama:.1f}")

import numpy as np

"""
Soru: Bir akıllı bileklikten alınan günlük uyku süreleri veriliyor.
7 saatten az uyunan günleri belirleyin.
"""
# Günlük uyku süreleri (saat)
uyku_sureleri = np.array([6.5, 7.2, 5.8, 8.1, 6.9, 7.5, 5.2, 7.8, 6.3, 7.1, 5.9, 8.2, 6.7, 7.4])

# Gün isimleri
gunler = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz',
          'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz']

# 7 saatten az uyunan günler
az_uyku_gunleri = uyku_sureleri < 7
az_uyku_gun_isimleri = np.array(gunler)[az_uyku_gunleri]
az_uyku_sureleri = uyku_sureleri[az_uyku_gunleri]

print("7 saatten az uyunan günler:")
for gun, sure in zip(az_uyku_gun_isimleri, az_uyku_sureleri):
    print(f"{gun}: {sure:.1f} saat")

# Ortalama uyku süresi
ortalama_uyku = np.mean(uyku_sureleri)
print(f"Ortalama uyku süresi: {ortalama_uyku:.1f} saat")

import numpy as np

"""
Soru: Bir online ankete katılanların yaşları veriliyor.
18-35 yaş arası katılımcıları belirleyin.
"""
# Katılımcı yaşları
yaslar = np.array([25, 42, 19, 31, 56, 23, 38, 29, 45, 22, 33, 27, 48, 35, 41])

# Katılımcı ID'leri
katilimci_id = np.arange(1, len(yaslar) + 1)

# 18-35 yaş arası katılımcılar
genc_katilimcilar = (yaslar >= 18) & (yaslar <= 35)
genc_id = katilimci_id[genc_katilimcilar]
genc_yaslar = yaslar[genc_katilimcilar]

print(f"18-35 yaş arası katılımcı sayısı: {len(genc_id)}")
print("Genç katılımcılar:")
for id, yas in zip(genc_id, genc_yaslar):
    print(f"Katılımcı {id}: {yas} yaş")

# Genç katılımcıların ortalama yaşı
ortalama_genc_yas = np.mean(genc_yaslar)
print(f"Genç katılımcıların ortalama yaşı: {ortalama_genc_yas:.1f}")

import numpy as np

"""
Soru: Bir fabrikanın günlük enerji tüketim verileri veriliyor.
Ortalamanın 2 standart sapma üzerindeki anormal tüketim günlerini bulun.
"""
# Günlük enerji tüketimi (kWh)
enerji_tuketimi = np.array([1250, 1340, 1180, 2450, 1280, 1320, 1190, 2560, 1260, 1300])

# Ortalama ve standart sapma
ortalama_tuketim = np.mean(enerji_tuketimi)
std_sapma = np.std(enerji_tuketimi)

# Anormal tüketim eşiği
anormal_esik = ortalama_tuketim + 2 * std_sapma

# Anormal tüketim günleri
anormal_gunler = enerji_tuketimi > anormal_esik
anormal_tuketimler = enerji_tuketimi[anormal_gunler]

print(f"Ortalama tüketim: {ortalama_tuketim:.0f} kWh")
print(f"Standart sapma: {std_sapma:.0f} kWh")
print(f"Anormal tüketim eşiği: {anormal_esik:.0f} kWh")
print(f"Anormal tüketim gün sayısı: {len(anormal_tuketimler)}")
print(f"Anormal tüketim değerleri: {anormal_tuketimler}")

import numpy as np

"""
Soru: Bir online mağazanın müşterilerinin aylık harcama miktarları veriliyor.
Müşterileri düşük (0-500 TL), orta (501-1000 TL) ve yüksek (1000+ TL) harcama gruplarına ayırın.
"""
# Müşteri aylık harcamaları (TL)
aylik_harcamalar = np.array([350, 1200, 280, 850, 1500, 420, 980, 230, 1100, 670])

# Müşteri ID'leri
musteri_id = np.arange(1001, 1001 + len(aylik_harcamalar))

# Harcama grupları
dusuk_harcama = musteri_id[aylik_harcamalar <= 500]
orta_harcama = musteri_id[(aylik_harcamalar > 500) & (aylik_harcamalar <= 1000)]
yuksek_harcama = musteri_id[aylik_harcamalar > 1000]

print(f"Düşük harcama grubu ({len(dusuk_harcama)} müşteri): {dusuk_harcama}")
print(f"Orta harcama grubu ({len(orta_harcama)} müşteri): {orta_harcama}")
print(f"Yüksek harcama grubu ({len(yuksek_harcama)} müşteri): {yuksek_harcama}")

# Grup bazında ortalama harcamalar
ortalama_dusuk = np.mean(aylik_harcamalar[aylik_harcamalar <= 500])
ortalama_orta = np.mean(aylik_harcamalar[(aylik_harcamalar > 500) & (aylik_harcamalar <= 1000)])
ortalama_yuksek = np.mean(aylik_harcamalar[aylik_harcamalar > 1000])

print(f"Düşük grubu ortalama: {ortalama_dusuk:.0f} TL")
print(f"Orta grubu ortalama: {ortalama_orta:.0f} TL")
print(f"Yüksek grubu ortalama: {ortalama_yuksek:.0f} TL")

import numpy as np

"""
Soru: Bir kavşağın saatlik araç sayıları veriliyor.
Yoğun saatlerdeki (100+ araç/saat) trafik verilerini analiz edin.
"""
# Saatlik araç sayıları
saatlik_arac_sayilari = np.array([45, 67, 89, 124, 156, 198, 234, 267,
                                  245, 187, 134, 98, 78, 56, 45, 67,
                                  89, 123, 167, 189, 156, 134, 112, 89])

# Yoğun saatler (100+ araç/saat)
yogun_saatler = saatlik_arac_sayilari > 100
yogun_saat_verileri = saatlik_arac_sayilari[yogun_saatler]

print(f"Yoğun trafik saat sayısı: {len(yogun_saat_verileri)}")
print(f"Yoğun saatlerdeki araç sayıları: {yogun_saat_verileri}")

# Yoğun saatlerin ortalama araç sayısı
ortalama_yogun = np.mean(yogun_saat_verileri)
print(f"Yoğun saatler ortalama araç sayısı: {ortalama_yogun:.0f}")

# En yoğun saat
en_yogun_saat = np.max(yogun_saat_verileri)
print(f"En yoğun saatteki araç sayısı: {en_yogun_saat}")